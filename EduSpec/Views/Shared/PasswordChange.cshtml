@model EduSpec.Models.ChangePasswordModel

<script type="text/javascript">
    function onInformationConfirmPaswordChange(Result) {

        if (Result == "mrOk") {
            pcChangePassword.Hide();
        }
    }
</script>

@MessageDlg.ShowMessageDlg("pcConfirmPaswordChange", Html, "The password has been changed.", new BtnType[] { BtnType.mbOK }, MessageType.mInformation, "onInformationConfirmPaswordChange")

@using (Html.BeginForm())
{

    ViewContext.Writer.Write("<div class=\"edit_form\" style=\"width: 300px\"><div class=\"line\">");

    Html.DevExpress().Label(settings =>
    {
        settings.Name = "UserID";
        settings.ClientVisible = false;
    }).GetHtml();
    
    Html.DevExpress().Label(settings =>
    {
        settings.Name = "NewPasswordLabel";
        settings.Text = "New Password";
        settings.AssociatedControlName = "NewPassword";
    }).GetHtml();
    
    Html.DevExpress().TextBoxFor(m => m.NewPassword, textBoxSettings =>
    {
        textBoxSettings.Name = "NewPassword";
        textBoxSettings.ControlStyle.CssClass = "editor";
        textBoxSettings.Properties.Password = true;
        textBoxSettings.Properties.ValidationSettings.EnableCustomValidation = true;
        textBoxSettings.Properties.ValidationSettings.ValidateOnLeave = true;
        textBoxSettings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom;                 
        textBoxSettings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText;
        textBoxSettings.Properties.ClientSideEvents.Validation = "OnPasswordValidation";
        textBoxSettings.ShowModelErrors = true;
        textBoxSettings.Width = 150;
    }).GetHtml();

    ViewContext.Writer.Write("</div><div class=\"line\">"); 

    Html.DevExpress().Label(settings =>
    {
        settings.Name = "ConfirmPasswordLabel";
        settings.Text = "Confirm Password";
        settings.AssociatedControlName = "ConfirmPassword";
    }).GetHtml();
    
    Html.DevExpress().TextBoxFor(m => m.ConfirmPassword, textBoxSettings =>
    {
        textBoxSettings.Name = "ConfirmPassword";
        textBoxSettings.ControlStyle.CssClass = "editor";
        textBoxSettings.Properties.Password = true;
        textBoxSettings.Properties.ValidationSettings.EnableCustomValidation = true;
        textBoxSettings.Properties.ValidationSettings.ValidateOnLeave = true;
        textBoxSettings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom;
        textBoxSettings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText;
        textBoxSettings.Properties.ClientSideEvents.Validation = "OnComparePasswords";
        textBoxSettings.ShowModelErrors = true;
        textBoxSettings.Width = 150;
    }).GetHtml();

   
    ViewContext.Writer.Write("</div><div class=\"line\">");

    Html.DevExpress().Button(buttonSettings =>
    {
        buttonSettings.Name = "btnOK";
        buttonSettings.ControlStyle.CssClass = "button";
        buttonSettings.Width = 80;
        buttonSettings.Text = "OK";
        buttonSettings.ClientSideEvents.Click = string.Format("function(s, e) {{if (NewPassword.GetIsValid() & ConfirmPassword.GetIsValid()) ChangePassword({0},{1},{2}); }}", "NewPassword.GetValue()", "ConfirmPassword.GetValue()", "UserID.GetText()");
    }).Render();

    Html.DevExpress().Button(buttonSettings =>
    {
        buttonSettings.Name = "btnCancel";
        buttonSettings.ControlStyle.CssClass = "button";
        buttonSettings.Width = 80;
        buttonSettings.Text = "Cancel";
        buttonSettings.ClientSideEvents.Click = "function(s, e){ pcChangePassword.Hide(); }";
    }).Render();
    
    ViewContext.Writer.Write("</div></div><b class=\"Clear\"></b>");
}
