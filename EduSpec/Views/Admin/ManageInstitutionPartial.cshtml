@model  EduSpec.Controllers.AdminController.EditableInstitution

@using (Html.BeginForm("updateInstitution", "Admin"))
{
    <table style="width:100%">
        <tr>
            <td style="vertical-align: top; width: 500px;">
                @Html.DevExpress().FormLayout(settings =>
           {
               settings.Name = "ManageInstitution";
               settings.EncodeHtml = false;
               settings.AlignItemCaptionsInAllGroups = true;
               settings.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
               var groupItem = settings.Items.AddGroupItem(itemSettings =>
               {
                   itemSettings.Caption = HttpContext.Current.Session["InstitutionName"].ToString();
                   itemSettings.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
                   itemSettings.Width = Unit.Percentage(100);
               });

               groupItem.Items.Add(m => m.Name, itemSettings =>
               {
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
                   itemSettings.NestedExtensionSettings.Width = Unit.Pixel(200);
                   itemSettings.Caption = "Institution Name";
               });

               groupItem.Items.Add(m => m.EMISNo, itemSettings =>
               {
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
                   itemSettings.NestedExtensionSettings.Width = Unit.Pixel(200);
                   itemSettings.Caption = "EMIS Number";
               });

               groupItem.Items.Add(m => m.QuintileID, itemSettings =>
               {
                   itemSettings.Caption = "Quintile";
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;
                   ComboBoxSettings cbSettings = (ComboBoxSettings)itemSettings.NestedExtensionSettings;
                   cbSettings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                   cbSettings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                   cbSettings.Properties.TextField = "Description";
                   cbSettings.Properties.ValueField = "ID";
                   cbSettings.Properties.ValueType = typeof(Int16);
                   cbSettings.Properties.DataSource = GridUtils.getDropdownList("Get_Quintile_PickList");
               });

               groupItem.Items.Add(m => m.CorrespondenceLanguageID, itemSettings =>
               {
                   itemSettings.Caption = "Language";
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;
                   ComboBoxSettings cbSettings = (ComboBoxSettings)itemSettings.NestedExtensionSettings;
                   cbSettings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                   cbSettings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                   cbSettings.Properties.TextField = "Description";
                   cbSettings.Properties.ValueField = "ID";
                   cbSettings.Properties.ValueType = typeof(Int16);
                   cbSettings.Properties.DataSource = GridUtils.getDropdownList("Get_CorrespondenceLanguage_PickList");
               });

               groupItem.Items.Add(m => m.PhaseID, itemSettings =>
               {
                   itemSettings.Caption = "Phase";
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;
                   ComboBoxSettings cbSettings = (ComboBoxSettings)itemSettings.NestedExtensionSettings;
                   cbSettings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                   cbSettings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                   cbSettings.Properties.TextField = "Description";
                   cbSettings.Properties.ValueField = "ID";
                   cbSettings.Properties.ValueType = typeof(Int16);
                   cbSettings.Properties.ClientSideEvents.SelectedIndexChanged = "setGrade";
                   cbSettings.Properties.DataSource = GridUtils.getDropdownList("Get_Phases_PickList");
               });                                           

               groupItem.Items.Add(m => m.IntegrationTypeID, itemSettings =>
               {
                   itemSettings.Caption = "Integration:";
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;
                   ComboBoxSettings cbSettings = (ComboBoxSettings)itemSettings.NestedExtensionSettings;
                   cbSettings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                   cbSettings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                   cbSettings.Properties.TextField = "Description";
                   cbSettings.Properties.ValueField = "ID";
                   cbSettings.Properties.ValueType = typeof(Int16);
                   cbSettings.Properties.DataSource = GridUtils.getDropdownList("Get_IntegrationType_PickList");
               });

               var groupGrades = settings.Items.AddGroupItem(itemSettings =>
               {
                   itemSettings.Caption = "Grades/Year";
                   itemSettings.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
                   itemSettings.Width = Unit.Percentage(100);
               });

               groupGrades.Items.Add(m => m.GradeFromID, itemSettings =>
               {
                   itemSettings.Caption = "Starting Grade:";
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;
                   ComboBoxSettings cbSettings = (ComboBoxSettings)itemSettings.NestedExtensionSettings;
                   cbSettings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                   cbSettings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                   cbSettings.Properties.TextField = "Description";
                   cbSettings.Properties.ValueField = "ID";
                   cbSettings.Properties.ValueType = typeof(Int16);
                   cbSettings.Name = "GradeFromID";
                   cbSettings.Properties.DataSource = GridUtils.getDropdownList("Get_Grade_PickList");
               });

               groupGrades.Items.Add(m => m.GradeToID, itemSettings =>
               {
                   itemSettings.Caption = "Ending Grade:";
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;
                   ComboBoxSettings cbSettings = (ComboBoxSettings)itemSettings.NestedExtensionSettings;
                   cbSettings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                   cbSettings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                   cbSettings.Properties.TextField = "Description";
                   cbSettings.Properties.ValueField = "ID";
                   cbSettings.Properties.ValueType = typeof(Int16);
                   cbSettings.Name = "GradeToID";
                   cbSettings.Properties.DataSource = GridUtils.getDropdownList("Get_Grade_PickList");
               });

               groupGrades.Items.Add(m => m.LESNFromYear, itemSettings =>
               {
                   itemSettings.Caption = "LESN Starting Year:";
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;
                   ComboBoxSettings cbSettings = (ComboBoxSettings)itemSettings.NestedExtensionSettings;
                   cbSettings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                   cbSettings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                   cbSettings.Properties.TextField = "Description";
                   cbSettings.Properties.ValueField = "ID";
                   cbSettings.Properties.ValueType = typeof(Int16);
                   cbSettings.Name = "LESNFromYear";
                   cbSettings.Properties.DataSource = GridUtils.getDropdownList("Get_LESNYear_PickList");
               });

               groupGrades.Items.Add(m => m.LESNToYear, itemSettings =>
               {
                   itemSettings.Caption = "LESN Ending Year:";
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;
                   ComboBoxSettings cbSettings = (ComboBoxSettings)itemSettings.NestedExtensionSettings;
                   cbSettings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                   cbSettings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                   cbSettings.Properties.TextField = "Description";
                   cbSettings.Properties.ValueField = "ID";
                   cbSettings.Properties.ValueType = typeof(Int16);
                   cbSettings.Name = "LESNToYear";
                   cbSettings.Properties.DataSource = GridUtils.getDropdownList("Get_LESNYear_PickList");
               });

               var GroupContactDetails = settings.Items.AddGroupItem(itemSettings =>
               {
                   itemSettings.Caption = "Contact";
                   itemSettings.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
                   itemSettings.Width = Unit.Percentage(100);
               });
               GroupContactDetails.Items.Add(m => m.Telephone, itemSettings =>
               {
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
                   itemSettings.NestedExtensionSettings.Width = Unit.Pixel(200);
                   itemSettings.Caption = "Telephone";
               });
               GroupContactDetails.Items.Add(m => m.Fax, itemSettings =>
               {
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
                   itemSettings.NestedExtensionSettings.Width = Unit.Pixel(200);
                   itemSettings.Caption = "Fax";
               });
               GroupContactDetails.Items.Add(m => m.Cell, itemSettings =>
               {
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
                   itemSettings.NestedExtensionSettings.Width = Unit.Pixel(200);
                   itemSettings.Caption = "Cell";
               });
               GroupContactDetails.Items.Add(m => m.Email, itemSettings =>
               {
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
                   itemSettings.NestedExtensionSettings.Width = Unit.Pixel(200);
                   itemSettings.Caption = "Email Address";
               });

           }).GetHtml()
            </td>

            <td style="vertical-align: top; width: 100%;">
                @Html.DevExpress().FormLayout(settings =>
           {
               settings.Name = "IsntitutionAddress";
               settings.AlignItemCaptionsInAllGroups = true;
               settings.Width = Unit.Percentage(100);
               settings.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;

               var PhysicalAddress = settings.Items.AddGroupItem(itemSettings =>
               {
                   itemSettings.Caption = "Physical Address";
                   itemSettings.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
                   itemSettings.Width = Unit.Percentage(100);
               });

               PhysicalAddress.Items.Add(m => m.PhysAddress1, itemSettings =>
               {
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
               });

               PhysicalAddress.Items.Add(m => m.PhysAddress2, itemSettings =>
               {
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
                   itemSettings.Caption = " ";
               });

               PhysicalAddress.Items.Add(m => m.PhysAddress3, itemSettings =>
               {
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
                   itemSettings.Caption = "Area";
               });

               PhysicalAddress.Items.Add(m => m.PhysProvinceID, itemSettings =>
               {
                   itemSettings.Caption = "Province";
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;
                   ComboBoxSettings cbSettings = (ComboBoxSettings)itemSettings.NestedExtensionSettings;
                   cbSettings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                   cbSettings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                   cbSettings.Properties.TextField = "Description";
                   cbSettings.Properties.ValueField = "ID";
                   cbSettings.Properties.ValueType = typeof(Int16);
                   cbSettings.Properties.DataSource = GridUtils.getDropdownList("Get_Provinces_PickList");
               });

               PhysicalAddress.Items.Add(m => m.PhysCode, itemSettings =>
               {
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
                   itemSettings.NestedExtensionSettings.Width = Unit.Pixel(50);
                   itemSettings.Caption = "Postal Code";
               });


               var PostalAddress = settings.Items.AddGroupItem(itemSettings =>
               {
                   itemSettings.Caption = "Postal Address";
                   itemSettings.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
                   itemSettings.Width = Unit.Percentage(100);
               });

               PostalAddress.Items.Add(m => m.PosAddress1, itemSettings =>
               {
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
                   itemSettings.Caption = "Address";
               });

               PostalAddress.Items.Add(m => m.PosAddress2, itemSettings =>
               {
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
                   itemSettings.Caption = " ";
               });

               PostalAddress.Items.Add(m => m.PosAddress3, itemSettings =>
               {
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
                   itemSettings.Caption = " ";
               });

               PostalAddress.Items.Add(m => m.PosProvinceID, itemSettings =>
               {
                   itemSettings.Caption = "Province";
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;
                   ComboBoxSettings cbSettings = (ComboBoxSettings)itemSettings.NestedExtensionSettings;
                   cbSettings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                   cbSettings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                   cbSettings.Properties.TextField = "Description";
                   cbSettings.Properties.ValueField = "ID";
                   cbSettings.Properties.ValueType = typeof(Int16);
                   cbSettings.Properties.DataSource = GridUtils.getDropdownList("Get_Provinces_PickList");
               });

               PostalAddress.Items.Add(m => m.PosCode, itemSettings =>
               {
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
                   itemSettings.NestedExtensionSettings.Width = Unit.Pixel(50);
                   itemSettings.Caption = "Postel Code";
               });

               PostalAddress.Items.Add(itemSettings =>
               {
                   itemSettings.ShowCaption = DefaultBoolean.False;
                   itemSettings.HorizontalAlign = FormLayoutHorizontalAlign.Right;
                   itemSettings.Width = 150;
                   itemSettings.ClientVisible = false;
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.Button;
                   var btnSettings = (ButtonSettings)itemSettings.NestedExtensionSettings;
                   btnSettings.Name = "applyButton";
                   btnSettings.Text = "Update Record";
                   btnSettings.UseSubmitBehavior = true;
               });
           }).Bind(Model).GetHtml()
            @*</td>*@

                @Html.DevExpress().FormLayout(settings =>
           {
               settings.Name = "InstitutionBankDetails";
               settings.AlignItemCaptionsInAllGroups = true;
               settings.Width = Unit.Percentage(100);
               settings.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;


               var BankDetails = settings.Items.AddGroupItem(itemSettings =>
               {
                   itemSettings.Caption = "Bank Details";
                   itemSettings.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
                   itemSettings.Width = Unit.Percentage(100);
               });
               
               BankDetails.Items.Add(m => m.BankID, itemSettings =>
               {
                   itemSettings.Caption = "Bank name";
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;
                   ComboBoxSettings cbSettings = (ComboBoxSettings)itemSettings.NestedExtensionSettings;
                   cbSettings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                   cbSettings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                   cbSettings.Properties.TextField = "Description";
                   cbSettings.Properties.ValueField = "ID";
                   cbSettings.Properties.ValueType = typeof(Int16);
                   cbSettings.Properties.DataSource = GridUtils.getDropdownList("Get_BankName_PickList");
               });

               BankDetails.Items.Add(m => m.BankAccount, itemSettings =>
               {
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
               });

               BankDetails.Items.Add(m => m.BankAccountTypeID, itemSettings =>
               {
                   itemSettings.Caption = "Bank account type";
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;
                   ComboBoxSettings cbSettings = (ComboBoxSettings)itemSettings.NestedExtensionSettings;
                   cbSettings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                   cbSettings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                   cbSettings.Properties.TextField = "Description";
                   cbSettings.Properties.ValueField = "ID";
                   cbSettings.Properties.ValueType = typeof(Int16);
                   cbSettings.Properties.DataSource = GridUtils.getDropdownList("Get_BankAccountType_PickList");
               });

               BankDetails.Items.Add(m => m.BankBranchCode, itemSettings =>
               {
                   itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
                   itemSettings.NestedExtensionSettings.Width = Unit.Pixel(50);
               });

               
           }).Bind(Model).GetHtml()
        </td>
        </tr>
    </table>
}