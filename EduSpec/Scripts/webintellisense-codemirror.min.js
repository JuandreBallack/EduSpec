/**
 * This class provides intellisense for either a textarea or an inputbox.
 * Triggers can be added 
 * 
 * @param {string|HTMLElement} editor - The id of a textarea or inputbox or the actual element
 * @class CodeMirrorIntellisense
 */var CodeMirrorIntellisense=function(e){function a(a){e=a,e.on("keyup",function(){t.isVisible()&&t.setFilter(p())}),e.on("keydown",function(a,f){function c(t,n){if(l)return;t.forEach(function(t){if(l)return;var r=t.shiftKey||!1,i=t.ctrlKey||!1,s=t.keyCode||0,o=t.preventDefault||!1;if(f.keyCode===s&&f.shiftKey===r&&f.ctrlKey===i){var a=e.getCursor();u.columnIndex=a.ch+1,u.lineIndex=a.line,l=!0,n(t),o&&f.preventDefault()}})}var l=!1;c(r,s),c(i,o),t.isVisible()&&(f.keyCode===8?t.setFilter(p()):t.handleKeyDown(f)),n.isVisible()&&n.handleKeyDown(f)})}function f(e){r.push(e)}function l(e){i.push(e)}function c(e){s=e}function h(e){o=e}function p(){var t=e.getCursor(),n=e.getLine(u.lineIndex);return n.substring(u.columnIndex,t.ch)}var t=new DeclarationsIntellisense,n=new MethodsIntellisense,r=[],i=[],s=null,o=null,u={lineIndex:0,columnIndex:0};t.onVisibleChanged(function(n){if(n){var r=e.cursorCoords(!0,"page");t.setPosition(r.left,r.bottom)}}),n.onVisibleChanged(function(t){if(t){var r=e.cursorCoords(!0,"page");n.setPosition(r.left,r.bottom)}}),t.onItemChosen(function(n){var r=n.value||n.name,i=e.getCursor(),s=e.getLine(u.lineIndex),o={line:i.line,ch:u.columnIndex},a={line:i.line,ch:i.ch};e.replaceRange(r,o,a),e.setSelection({line:i.line,ch:i.ch+r.length}),t.setVisible(!1),e.focus()}),a(e),this.getDecls=function(){return t},this.getMeths=function(){return n},this.addDeclarationTrigger=f,this.addMethodsTrigger=l,this.onDeclaration=c,this.onMethod=h,this.setMethods=function(e){n.setMethods(e)},this.setDeclarations=function(e){t.setDeclarations(e)},this.setStartColumnIndex=function(e){u.columnIndex=e},this.getFilterText=p};