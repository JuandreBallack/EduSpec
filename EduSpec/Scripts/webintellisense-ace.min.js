ace.define("ace/intellisense", ["require", "exports", "module", "ace/keyboard/hash_handler"], function (e, t, n) { var r = e("./keyboard/hash_handler").HashHandler, i = e("ace/lib/event"), s = function (e) { function b(t, n) { var r = e.renderer, i = r.scroller.getBoundingClientRect(), s = (t + r.scrollLeft - i.left - r.$padding) / r.characterWidth, o = Math.floor((n + r.scrollTop - i.top) / r.lineHeight), u = Math.round(s); return { rowIndex: o, columnIndex: u } } function w() { if (e.getValue() != "") { var t = v, n = b(t.clientX, t.clientY), r = e.session.getLine(n.rowIndex); r.length > n.columnIndex && (self.isCalling = !0, a({ line: r, lineIndex: n.rowIndex, columnIndex: n.columnIndex })) } } function E(e) { if (!g) { p != null && clearTimeout(p); if (h.isVisible()) { var t = b(e.clientX, e.clientY); (t.rowIndex != y.lineNumber - 1 || t.columnIndex < y.startColumnIndex || t.columnIndex > y.endColumnIndex) && h.setVisible(!1) } v = e, p = setTimeout(w, d) } } function S() { p != null && (clearTimeout(p), h.setVisible(!1)) } function x(t) { e = t; var r = e.getSession(), a = e.getSession().getDocument(); e.on("change", function () { n.isVisible() && n.setFilter(A()) }), e.keyBinding.originalOnCommandKey = e.keyBinding.onCommandKey, e.keyBinding.onCommandKey = function (t, r, i) { function h(n, r) { if (a) return; n.forEach(function (n) { if (a) return; var i = n.shiftKey || !1, s = n.ctrlKey || !1, o = n.keyCode || 0, u = n.preventDefault || !1; if (t.keyCode === o && t.shiftKey === i && t.ctrlKey === s) { var f = e.getSelection().getCursor(); c.columnIndex = f.column + 1, c.lineIndex = f.row, a = !0, r(n), u && t.preventDefault() } }) } if (t == null) return; var a = !1; h(o, f), h(u, l), n.isVisible() && (t.keyCode === 8 ? n.setFilter(A()) : n.handleKeyDown(t)), s.isVisible() && s.handleKeyDown(t), t.defaultPrevented || e.keyBinding.originalOnCommandKey(t, r, i) }, i.addListener(e.renderer.scroller, "mousemove", E), i.addListener(e.renderer.content, "mouseout", S) } function T(e) { o.push(e) } function N(e) { u.push(e) } function C(e) { f = e } function k(e) { l = e } function L(e) { a = e } function A() { var t = e.getSelection().getCursor(), n = e.getSession().getLine(c.lineIndex); return n.substring(c.columnIndex, t.column + 1) } function O(t, n, r, i) { if (t != "") { h.setText(t), h.setVisible(!0), y.lineIndex = n, y.startColumnIndex = r, y.endColumnIndex = i; var s = e.renderer, o = s.scroller.getBoundingClientRect(), u = y.startColumnIndex * s.characterWidth + o.left - s.scrollLeft, a = (y.lineIndex + 1) * s.lineHeight + o.top - s.scrollTop; h.setPosition(u, a) } } var t = new r, n = new DeclarationsIntellisense, s = new MethodsIntellisense, o = [], u = [], a = null, f = null, l = null, c = { lineIndex: 0, columnIndex: 0 }, h = new Tooltip, p = null, d = 1e3, v = null, m = null, g = !1, y = { lineIndex: 0, startColumnIndex: 0, endColumnIndex: 0 }; n.onVisibleChanged(function (t) { if (t) { var r = e.selection.getCursor(), i = e.renderer.textToScreenCoordinates(r.row, r.column), s = i.pageY + window.pageYOffset + 10, o = i.pageX - 5; n.setPosition(o, s) } }), s.onVisibleChanged(function (t) { if (t) { var n = e.selection.getCursor(), r = e.renderer.textToScreenCoordinates(n.row, n.column), i = r.pageY + window.pageYOffset + 10, o = r.pageX - 5; s.setPosition(o, i) } }), n.onItemChosen(function (t) { var r = t.value || t.name, i = e.getSession().getDocument(), s = e.getSelection().getCursor(), o = i.getLine(c.lineIndex), u = o.substring(0, c.columnIndex) + r + o.substring(s.column, o.length); i.getLength() == 1 ? i.setValue(u) : (i.removeLines(s.row, s.row), i.insertLines(s.row, [u])), e.getSelection().moveCursorTo(s.row, c.columnIndex + r.length), n.setVisible(!1), e.focus() }), x(e), this.getTooltip = function () { return h }, this.getDecls = function () { return n }, this.getMeths = function () { return s }, this.addDeclarationTrigger = T, this.addMethodsTrigger = N, this.onDeclaration = C, this.onMethod = k, this.onTooltip = L, this.setTooltipData = O, this.setMethods = function (e) { s.setMethods(e) }, this.setDeclarations = function (e) { n.setDeclarations(e) }, this.setStartColumnIndex = function (e) { c.columnIndex = e }, this.getFilterText = A }; t.AceIntellisense = function (e) { return new s(e) } });